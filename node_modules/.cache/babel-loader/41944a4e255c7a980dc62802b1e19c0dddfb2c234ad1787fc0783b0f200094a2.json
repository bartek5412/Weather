{"ast":null,"code":"var _jsxFileName = \"C:\\\\tokarczuk\\\\VS_code\\\\Weather\\\\src\\\\components\\\\MapComponent.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/components/MapComponent.tsx\nimport React, { useEffect, useState } from \"react\";\nimport { MapContainer, TileLayer, GeoJSON, useMap } from \"react-leaflet\";\nimport countryData from \"./countries.geojson\"; // Upewnij się, że ścieżka do pliku GeoJSON jest poprawna\nimport \"leaflet/dist/leaflet.css\";\n\n// Importuj typy GeoJSON\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChangeView = ({\n  center,\n  zoom\n}) => {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    map.setView(center, zoom);\n  }, [center, zoom, map]);\n  return null;\n};\n_s(ChangeView, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = ChangeView;\nconst MapComponent = ({\n  country\n}) => {\n  _s2();\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  useEffect(() => {\n    // Znajdź dane GeoJSON wybranego kraju\n    const countryFeature = countryData.features.find(feature => feature.properties && feature.properties.name === country // Sprawdzamy, czy properties nie jest null\n    );\n    setSelectedCountry(countryFeature || null);\n  }, [country]);\n  const highlightStyle = {\n    fillColor: \"blue\",\n    weight: 2,\n    opacity: 1,\n    color: \"blue\",\n    fillOpacity: 0.3\n  };\n  const defaultCenter = [51.505, -0.09]; // Domyślne centrum mapy\n  const zoomLevel = 4; // Domyślny poziom powiększenia\n\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    style: {\n      height: \"400px\",\n      width: \"100%\"\n    } // Usunięcie center i zoom\n    ,\n    children: [/*#__PURE__*/_jsxDEV(ChangeView, {\n      center: defaultCenter,\n      zoom: zoomLevel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), selectedCountry && /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: selectedCountry,\n      pathOptions: highlightStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: countryData,\n      pathOptions: {\n        fillColor: \"gray\",\n        weight: 1,\n        color: \"black\",\n        fillOpacity: 0.1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s2(MapComponent, \"reTSF4xOJbscXi4YU4ODEjYXRuo=\");\n_c2 = MapComponent;\nexport default MapComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"ChangeView\");\n$RefreshReg$(_c2, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","GeoJSON","useMap","countryData","jsxDEV","_jsxDEV","ChangeView","center","zoom","_s","map","setView","_c","MapComponent","country","_s2","selectedCountry","setSelectedCountry","countryFeature","features","find","feature","properties","name","highlightStyle","fillColor","weight","opacity","color","fillOpacity","defaultCenter","zoomLevel","style","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","url","data","pathOptions","_c2","$RefreshReg$"],"sources":["C:/tokarczuk/VS_code/Weather/src/components/MapComponent.tsx"],"sourcesContent":["// src/components/MapComponent.tsx\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { MapContainer, TileLayer, GeoJSON, useMap } from \"react-leaflet\";\r\nimport countryData from \"./countries.geojson\"; // Upewnij się, że ścieżka do pliku GeoJSON jest poprawna\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport {\r\n  FeatureCollection,\r\n  Feature,\r\n  Geometry,\r\n  GeoJsonProperties,\r\n} from \"geojson\"; // Importuj typy GeoJSON\r\n\r\ninterface MapComponentProps {\r\n  country: string;\r\n}\r\n\r\nconst ChangeView: React.FC<{ center: [number, number]; zoom: number }> = ({\r\n  center,\r\n  zoom,\r\n}) => {\r\n  const map = useMap();\r\n  useEffect(() => {\r\n    map.setView(center, zoom);\r\n  }, [center, zoom, map]);\r\n\r\n  return null;\r\n};\r\n\r\nconst MapComponent: React.FC<MapComponentProps> = ({ country }) => {\r\n  const [selectedCountry, setSelectedCountry] = useState<Feature<\r\n    Geometry,\r\n    GeoJsonProperties\r\n  > | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Znajdź dane GeoJSON wybranego kraju\r\n    const countryFeature = (countryData as FeatureCollection).features.find(\r\n      (feature: Feature<Geometry, GeoJsonProperties>) =>\r\n        feature.properties && feature.properties.name === country // Sprawdzamy, czy properties nie jest null\r\n    );\r\n    setSelectedCountry(countryFeature || null);\r\n  }, [country]);\r\n\r\n  const highlightStyle = {\r\n    fillColor: \"blue\",\r\n    weight: 2,\r\n    opacity: 1,\r\n    color: \"blue\",\r\n    fillOpacity: 0.3,\r\n  };\r\n\r\n  const defaultCenter: [number, number] = [51.505, -0.09]; // Domyślne centrum mapy\r\n  const zoomLevel = 4; // Domyślny poziom powiększenia\r\n\r\n  return (\r\n    <MapContainer\r\n      style={{ height: \"400px\", width: \"100%\" }} // Usunięcie center i zoom\r\n    >\r\n      <ChangeView center={defaultCenter} zoom={zoomLevel} />\r\n      <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n      {selectedCountry && (\r\n        <GeoJSON data={selectedCountry} pathOptions={highlightStyle} />\r\n      )}\r\n      <GeoJSON\r\n        data={countryData}\r\n        pathOptions={{\r\n          fillColor: \"gray\",\r\n          weight: 1,\r\n          color: \"black\",\r\n          fillOpacity: 0.1,\r\n        }}\r\n      />\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}