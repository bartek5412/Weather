{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\barte\\\\Documents\\\\Visual\\\\shop\\\\src\\\\site\\\\weather.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useQuery, QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const fetchWeather = async () => {\n  _s();\n  const [latitude, setlatitude] = useState(52.4069);\n  const [longitude, setLongitude] = useState(16.9299);\n  const response = await axios.get(\"https://api.open-meteo.com/v1/forecast\", {\n    params: {\n      latitude,\n      longitude,\n      hourly: [\"temperature_2m\", \"rain\"]\n    }\n  });\n  return response.data;\n};\n_s(fetchWeather, \"Vr7dC3iZpsbrdogWNuLmCMGfQp8=\");\nconst queryClient = new QueryClient();\nfunction CurrentWeather() {\n  _s2();\n  const currentHour = new Date().getHours();\n  const {\n    data,\n    error,\n    isLoading\n  } = useQuery({\n    queryKey: [\"weather\"],\n    queryFn: fetchWeather,\n    refetchInterval: 1000\n  });\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\\u0141adowanie danych\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"B\\u0142\\u0105d: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 21\n  }, this);\n  const currentTemperature = data === null || data === void 0 ? void 0 : data.hourly.temperature_2m[currentHour];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-8 bg-gray-200 basis-1/4 shadow-xl rounded-lg flex flex-col items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold\",\n      children: \"Aktualna prognoza pogody dla Poznania\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-4xl my-4\",\n      children: currentTemperature !== undefined ? `${currentTemperature}°C` : \"Brak danych\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s2(CurrentWeather, \"vamb9feK/asxjJLX6wcKCD8DQJA=\", false, function () {\n  return [useQuery];\n});\n_c = CurrentWeather;\nconst Weather = () => {\n  return /*#__PURE__*/_jsxDEV(QueryClientProvider, {\n    client: queryClient,\n    children: /*#__PURE__*/_jsxDEV(CurrentWeather, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Weather;\nexport default Weather;\nvar _c, _c2;\n$RefreshReg$(_c, \"CurrentWeather\");\n$RefreshReg$(_c2, \"Weather\");","map":{"version":3,"names":["useQuery","QueryClient","QueryClientProvider","axios","useState","jsxDEV","_jsxDEV","fetchWeather","_s","latitude","setlatitude","longitude","setLongitude","response","get","params","hourly","data","queryClient","CurrentWeather","_s2","currentHour","Date","getHours","error","isLoading","queryKey","queryFn","refetchInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","message","currentTemperature","temperature_2m","className","undefined","_c","Weather","client","_c2","$RefreshReg$"],"sources":["C:/Users/barte/Documents/Visual/shop/src/site/weather.tsx"],"sourcesContent":["import {\r\n  useQuery,\r\n  QueryClient,\r\n  QueryClientProvider,\r\n} from \"@tanstack/react-query\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\n\r\ninterface WeatherData {\r\n  hourly: {\r\n    temperature_2m: number[];\r\n  };\r\n}\r\n\r\nexport const fetchWeather = async () => {\r\n  const [latitude, setlatitude] = useState<number>(52.4069);\r\n  const [longitude, setLongitude] = useState<number>(16.9299);\r\n  const response = await axios.get<WeatherData>(\r\n    \"https://api.open-meteo.com/v1/forecast\",\r\n    {\r\n      params: {\r\n        latitude,\r\n        longitude,\r\n        hourly: [\"temperature_2m\", \"rain\"],\r\n      },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nfunction CurrentWeather() {\r\n  const currentHour = new Date().getHours();\r\n  const { data, error, isLoading } = useQuery<WeatherData, Error>({\r\n    queryKey: [\"weather\"],\r\n    queryFn: fetchWeather,\r\n    refetchInterval: 1000,\r\n  });\r\n  if (isLoading) return <p>Ładowanie danych</p>;\r\n  if (error) return <p>Błąd: {error.message}</p>;\r\n  const currentTemperature = data?.hourly.temperature_2m[currentHour];\r\n\r\n  return (\r\n    <div className=\"p-8 bg-gray-200 basis-1/4 shadow-xl rounded-lg flex flex-col items-center\">\r\n      <h2 className=\"text-xl font-bold\">\r\n        Aktualna prognoza pogody dla Poznania\r\n      </h2>\r\n      <div className=\"text-4xl my-4\">\r\n        {currentTemperature !== undefined\r\n          ? `${currentTemperature}°C`\r\n          : \"Brak danych\"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Weather: React.FC = () => {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <CurrentWeather />\r\n    </QueryClientProvider>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}